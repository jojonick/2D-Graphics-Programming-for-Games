using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;

using System.Xml;

/*
Challenge 3.3. Create a process for parsing the data in a sprite atlas. Your
project should read in both the image ﬁle and the corresponding text ﬁle
as generated by software such as TexturePackerPro.
*/

/*
    Used: TexturePacker Free with XML generic data file
          Assets http://kenney.nl/assets/shooting-gallery  (stall .png sprites)         
    Note: The file generated, stall.txt, stays in ...\x86\Debug               
*/
namespace Challenge_3_3
{
    public struct SpriteData
    {
        public int x; // sprite x pos in texture
        public int y; // sprite y pos in texture
        public int w; // sprite width
        public int h; // sprite height
    }

    class AtlasFileParser // assume XML as data format...
    {
        XmlDocument doc;

        public AtlasFileParser(string file_name)
        {
            doc = new XmlDocument();
            doc.Load(file_name);
        }

        public SpriteData? getSpriteData(string xpath)
        {
            SpriteData? data = null;

            XmlNodeList sprites = doc.SelectNodes(xpath);
            if (sprites.Count != 0) // assuming exactly one match!
            {
                XmlNode sprite = sprites[0];

                data = new SpriteData()
                {
                    x = int.Parse(sprite.Attributes["x"].InnerText),
                    y = int.Parse(sprite.Attributes["y"].InnerText),
                    w = int.Parse(sprite.Attributes["w"].InnerText),
                    h = int.Parse(sprite.Attributes["h"].InnerText)
                };
            }
            return data;
        }
    }

    /// <summary>
    /// This is the main type for your game
    /// </summary>
    public class Game1 : Microsoft.Xna.Framework.Game
    {
        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;

        Random rnd;

        AtlasFileParser afparser;
        Texture2D ss_atlas;

        List<Vector2> water_positions = new List<Vector2>();
        List<Vector2> cloud_positions = new List<Vector2>();

        SpriteData? sd_water, sd_cloud;
        public Game1()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";

        }

        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        protected override void Initialize()
        {
            // TODO: Add your initialization logic here
            graphics.PreferredBackBufferWidth = 1280;
            graphics.PreferredBackBufferHeight = 720;
            graphics.ApplyChanges();

            rnd = new Random();

            afparser = new AtlasFileParser("stall.txt");

            // for the water
            sd_water = afparser.getSpriteData("/TextureAtlas/sprite[@n='water1.png']");
            for (int x = 0; x < Math.Ceiling(graphics.PreferredBackBufferWidth / (float)sd_water.Value.w); x++)
            {
                water_positions.Add(new Vector2(x * sd_water.Value.w, graphics.PreferredBackBufferHeight - sd_water.Value.h));
            }

            // for the cloud
            sd_cloud = afparser.getSpriteData("/TextureAtlas/sprite[@n='cloud2.png']");
            for (int x = 0; x < 4; x++) // arbitrary only 4 clouds
            {
                cloud_positions.Add(new Vector2(rnd.Next(0, graphics.PreferredBackBufferWidth - sd_cloud.Value.w),
                                                rnd.Next(0, graphics.PreferredBackBufferHeight / 2)));
            }

            base.Initialize();
        }

        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        protected override void LoadContent()
        {
            // Create a new SpriteBatch, which can be used to draw textures.
            spriteBatch = new SpriteBatch(GraphicsDevice);

            // TODO: use this.Content to load your game content here
            ss_atlas = Content.Load<Texture2D>("stall");

        }

        /// <summary>
        /// UnloadContent will be called once per game and is the place to unload
        /// all content.
        /// </summary>
        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Update(GameTime gameTime)
        {
            // Allows the game to exit
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed)
                this.Exit();

            // TODO: Add your update logic here

            base.Update(gameTime);
        }

        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.LightBlue);

            // TODO: Add your drawing code here
            spriteBatch.Begin();

            foreach (Vector2 p in water_positions)
            {
                spriteBatch.Draw(ss_atlas,
                                 p,
                                 new Rectangle(sd_water.Value.x, sd_water.Value.y, sd_water.Value.w, sd_water.Value.h),
                                 Color.White, 0, Vector2.Zero, 1, SpriteEffects.None, 0);
            }

            foreach (Vector2 p in cloud_positions)
            {
                spriteBatch.Draw(ss_atlas,
                                 p,
                                 new Rectangle(sd_cloud.Value.x, sd_cloud.Value.y, sd_cloud.Value.w, sd_cloud.Value.h),
                                 Color.White, 0, Vector2.Zero, 1, SpriteEffects.None, 0);
            }

            spriteBatch.End();

            base.Draw(gameTime);
        }
    }
}
